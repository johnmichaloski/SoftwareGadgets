<?xml version="1.0"?>
<doc>
    <assembly>
        <name>wd2md</name>
    </assembly>
    <members>
        <member name="F:wd2md.Form1.mdfilename">
            word filename
        </member>
        <member name="F:wd2md.Form1.dialogtitle">
            markdown filename
        </member>
        <member name="F:wd2md.Form1.appnamever">
            saved dialog title for restoring
        </member>
        <member name="M:wd2md.Form1.label3_Click(System.Object,System.EventArgs)">
            <summary>
            Event handler for selecting word document.
            Full path saved.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:wd2md.Form1.button1_Click(System.Object,System.EventArgs)">
            <summary>
            Go button event. Start wd2md process thread.
            It it optional to specify a md file name.
            Initializes the wd2md process with filenames.
            If fails, doesn't start thread.
            Inserts a TOC depending on the checkbox.
            Prepares progress bar and timer.
            Starts a worker thread that runs.
            Set as a STA thread or fails when using clipboard (GUI issue?)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:wd2md.Form1.timer1_Tick(System.Object,System.EventArgs)">
            <summary>
            timer1_Tick is a procedure that runs when wd2md process is running.
            It updates the progress bar in the status area.
            The progress bar takes number of paragraphs as maximum, assuming it is > 0.
            When done the timer is turned off, the progress bar is hidden.
            </summary>
            <param name="sender"></param>
            <param name="e">timer expired</param>
        </member>
        <member name="M:wd2md.Form1.label4_Click(System.Object,System.EventArgs)">
            <summary>
            Markdown file to save to. Optional. Uses modified word file name
            if no markdown filename is selected. Allows overwrite.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:wd2md.Form1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:wd2md.Form1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:wd2md.Form1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:wd2md.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:wd2md.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:wd2md.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:IniReader.#ctor(System.String)">
            <summary>
            Opens the INI file at the given path and enumerates the values in the IniParser.
            </summary>
            <param name="iniPath">Full path to INI file.</param>
        </member>
        <member name="M:IniReader.GetSetting(System.String,System.String)">
            <summary>
            Returns the value for the given section, key pair.
            </summary>
            <param name="sectionName">Section name.</param>
            <param name="settingName">Key name.</param>
        </member>
        <member name="M:IniReader.EnumSection(System.String)">
            <summary>
            Enumerates all lines for given section.
            </summary>
            <param name="sectionName">Section to enum.</param>
        </member>
        <member name="M:IniReader.AddSetting(System.String,System.String,System.String)">
            <summary>
            Adds or replaces a setting to the table to be saved.
            </summary>
            <param name="sectionName">Section to add under.</param>
            <param name="settingName">Key name to add.</param>
            <param name="settingValue">Value of key.</param>
        </member>
        <member name="M:IniReader.AddSetting(System.String,System.String)">
            <summary>
            Adds or replaces a setting to the table to be saved with a null value.
            </summary>
            <param name="sectionName">Section to add under.</param>
            <param name="settingName">Key name to add.</param>
        </member>
        <member name="M:IniReader.DeleteSetting(System.String,System.String)">
            <summary>
            Remove a setting.
            </summary>
            <param name="sectionName">Section to add under.</param>
            <param name="settingName">Key name to add.</param>
        </member>
        <member name="M:IniReader.SaveSettings(System.String)">
            <summary>
            Save settings to new file.
            </summary>
            <param name="newFilePath">New file path.</param>
        </member>
        <member name="M:IniReader.SaveSettings">
            <summary>
            Save settings back to ini file.
            </summary>
        </member>
        <member name="T:wd2md.TOC">
            <summary>
            TOC contains the information about a table of content entry. 
            This includes the string, the numbers for h1, h2, h3.
            For example, 1.2 give a number array: 1,2,0.
            1.2.1 gives a number array of 1,2,1.
            When no subsection, the number is zero.
            A static array is kept to keep track of the
            detecting of headings. H1,H2,H3 are also
            static methods to create a TOC entry using
            the static index array, and adding the section
            name string.
            </summary>
        </member>
        <member name="F:wd2md.TOC.h">
            <summary>
            This is the static heading counter. 
            Used by all instances of TOC.
            </summary>
        </member>
        <member name="F:wd2md.TOC.hdr">
            <summary>
            Instance data of a TOC.
            </summary>
        </member>
        <member name="F:wd2md.TOC.heading">
            <summary>
             String of the header.
            </summary>
        </member>
        <member name="M:wd2md.TOC.#ctor">
            <summary>
            Constructor. Builds empty TOC.
            </summary>
        </member>
        <member name="M:wd2md.TOC.H1(System.String)">
            <summary>
            Builds H1 TOC, using static section "odometer".
            User provides TOC H1 label as string.
            </summary>
            <param name="hdr">heading label</param>
            <returns> new TOC </returns>
        </member>
        <member name="M:wd2md.TOC.H2(System.String)">
            <summary>
            Builds H2 TOC, using static section "odometer".
            User provides TOC 2 label as string.
            </summary>
            <param name="hdr">heading2 label </param>
            <returns>new TOC</returns>
        </member>
        <member name="M:wd2md.TOC.H3(System.String)">
            <summary>
            Builds H3 TOC, using static section "odometer".
            User provides TOC 3 label as string.
            </summary>
            <param name="hdr">heading2 label </param>
            <returns>new TOC</returns>
        </member>
        <member name="T:wd2md.WordAutomation">
            <summary>
                Handles the word automation and conversion into Markdown.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.tocpattern">
            <summary>
            Table of contens handling, If enabled by bInsertTOC true,
            inserts a placeholder (tocpattern) into the md text.
            After the document has been processed, it then inserts
            a table of contents where the placeholder was inserted.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.toc">
            <summary>
            List of table of contents entries: h1,h2,h3 and equivalents
            are saved into toc.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.bFoundTOC">
            <summary>
            Boolean true if found table of contents in document.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.bInsertTOC">
            <summary>
            Boolean true if table of contents should be inserts.
            FIXME: if no toc in word, no TOC marker is placed in
            document.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.totaltext">
            <summary>
            Entire transcribed MD text to save.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.mdfilename">
            <summary>
            MD filename to save text as.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.mdfiletitle">
            <summary>
            MD file title for use with image folder naming.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.wdfilename">
            <summary>
            word file to convert into markdown.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.bDone">
            <summary>
            boolean true when conversion from word to markdown 
            is done.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.doneStatus">
            <summary>
            text describing done status.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.nParagraphs">
            <summary>
                Number of paragraphs in document.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.nCurParagraph">
            <summary>
            numbef or current parapgraph being converted from word to md.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.TablesRanges">
            <summary>
                List of all tables and their ranges.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.ImageRanges">
            <summary>
                List of all images and their ranges.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.oMissing">
            <summary>
            C# missing value placeholder.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.oWordDoc">
            <summary>
                Word application COM variable.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.oWord">
            <summary>
                Word document COM variable.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.filename">
            <summary>
                Filename of the current word file undergoing conversione.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.wdfoldername">
            <summary>
                Foldername of the current word file undergoing conversion.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.wdpathtitle">
            <summary>
                File path includinbg file title of current word file undergoing conversion. Useful for differentiating images.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.wdfiletitle">
            <summary>
                File title of current word file undergoing conversion. Useful for differentiating images.
            </summary>
        </member>
        <member name="F:wd2md.WordAutomation.wdfilecopy">
            <summary>
                Copied filename of the current word file undergoing conversione.
            </summary> 
        </member>
        <member name="M:wd2md.WordAutomation.#ctor">
            <summary>
            Empty constructor. Does nothing.
            </summary>
        </member>
        <member name="M:wd2md.WordAutomation.GetTableRanges">
            <summary>
            Get all the beginning and end ranges of each table
            using word automation.
            </summary>
        </member>
        <member name="M:wd2md.WordAutomation.ExePath">
            <summary>
            Execution path of the application. 
            THis returns a file:// URI :(  File.Copy DOES not like.)
            </summary>
            <returns>file path</returns>
        </member>
        <member name="M:wd2md.WordAutomation.FindAllSubscripts">
            <summary>
            Replace all subscripts and superscripts with HTML equivalent.
            Done by clearing word formatting, and inserting and prepending
            appropriate font format to text.
            </summary>
        </member>
        <member name="M:wd2md.WordAutomation.ConvertShapesToInline">
            <summary>
                Converts drawing canvases to inline drawings using cut and paste special.
            </summary>
        </member>
        <member name="M:wd2md.WordAutomation.GetImageRanges">
            <summary>
                Extracts all the image ranges into the ImageRanges data structure .
            </summary>
        </member>
        <member name="M:wd2md.WordAutomation.SaveAllImages(System.String)">
            <summary>
                Saves all the image ranges into the folder images under the current filename folder.
                Uses clipboard to copy and paste into image handler, which saves AS gif.
            </summary>
        </member>
        <member name="M:wd2md.WordAutomation.InImage(Microsoft.Office.Interop.Word.Paragraph)">
            <summary>
                Determine if given paragraph p in found in the ImageRanges.
            </summary>
        </member>
        <member name="M:wd2md.WordAutomation.InTable(Microsoft.Office.Interop.Word.Paragraph,Microsoft.Office.Interop.Word.Range@)">
            <summary>
                Determine if given paragraph p in found in the TablesRanges.
            </summary>
        </member>
        <member name="M:wd2md.WordAutomation.TrimEnd(System.String,System.String@)">
            <summary>
            Let's remove trailing spaces and comma.
            </summary>
            <param name="inputString"> string to trim and save </param>
            <returns></returns>
        </member>
        <member name="M:wd2md.WordAutomation.Words(Microsoft.Office.Interop.Word.Paragraph)">
            <summary>
                Looks at each word in a paragraph and formats font if word is bold or underlined.
            </summary>
        </member>
        <member name="M:wd2md.WordAutomation.Init(System.String,System.String)">
            <summary>
            Inputs word file to convert. 
            </summary>
        </member>
        <member name="M:wd2md.WordAutomation.generateTOC(System.String)">
            <summary>
            Generate a table of contents using all the H1,H2,H3 sections
            that were found. Creates a string with local reference to href 
            in the md file.
            </summary>
            <param name="text">string containing the TOC </param>
            <returns></returns>
        </member>
        <member name="M:wd2md.WordAutomation.Run">
            <summary>
            Converts word document into markdown text document.
            Typically runs as STA thread. Uses nCurParagraph to indicate progress.
            Saves images, all image and table ranges, and
            then processes each paragraph. If image or table, handles. Tables are currently handled as HTML.
            If other style, mapping is performed.
            Output is streamed to Readme.md in the same folder as the oringal work file. 
            </summary>
        </member>
        <member name="M:wd2md.WordAutomation.SaveClipboardImage(System.String)">
            <summary>
                Saves the clipboard into the given filename as a gif.  Uses System.Drawing.Image
            </summary>
        </member>
        <member name="M:wd2md.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
    </members>
</doc>
